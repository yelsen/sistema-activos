/*!
 * Toastify js 1.12.0
 * https://github.com/apvarun/toastify-js
 * @license MIT licensed
 *
 * Copyright (C) 2018 Varun A P
 */

!(function (t, o) {
    "object" == typeof module && module.exports
        ? (module.exports = o())
        : (t.Toastify = o());
})(this, function (t) {
    var o = function (t) {
        return new o.lib.init(t);
    };
    return (
        (o.lib = {
            defaults: {
                oldestFirst: !0,
                text: "Toastify is awesome!",
                node: void 0,
                duration: 3e3,
                selector: void 0,
                callback: function () { },
                destination: void 0,
                newWindow: !1,
                close: !1,
                gravity: "toastify-top",
                positionLeft: !1,
                position: "toastify-right",
                backgroundColor: "",
                avatar: "",
                className: "toastify",
                stopOnFocus: !0,
                onClick: function () { },
                offset: { x: 0, y: 0 },
                escapeMarkup: !0,
                ariaLive: "polite",
                style: {},
            },
            toastify: document.createElement("div"),
            init: function (t) {
                return (
                    (o.lib.defaults = Object.assign(o.lib.defaults, t)),
                    (this.options = o.lib.defaults),
                    (this.toastElement = null),
                    this.options.selector
                        ? (this.selector = document.querySelector(this.options.selector))
                        : (this.selector = ""),
                    this.buildToast(),
                    this
                );
            },
            buildToast: function () {
                if (!this.options.text && !this.options.node)
                    throw "Toastify is missing required option `text` or `node`";
                (this.toastElement = document.createElement("div")),
                    (this.toastElement.className = "toastify on"),
                    (this.toastElement.className += " " + this.options.className),
                    this.options.position
                        ? (this.toastElement.className += " " + this.options.position)
                        : (this.toastElement.className += " toastify-right"),
                    "toastify-top" == this.options.gravity
                        ? (this.toastElement.className += " toastify-top")
                        : "toastify-center" == this.options.gravity
                            ? (this.toastElement.className += " toastify-center")
                            : (this.toastElement.className += " toastify-bottom"),
                    this.options.backgroundColor &&
                    (this.toastElement.style.background = this.options.backgroundColor);
                for (var t in this.options.style)
                    this.toastElement.style[t] = this.options.style[t];
                if (
                    (this.options.ariaLive &&
                        this.toastElement.setAttribute("aria-live", this.options.ariaLive),
                        this.options.node && this.options.node.nodeType === Node.ELEMENT_NODE)
                )
                    this.toastElement.appendChild(this.options.node);
                else if (
                    (this.options.escapeMarkup
                        ? (this.toastElement.innerText = this.options.text)
                        : (this.toastElement.innerHTML = this.options.text),
                        this.options.avatar && "" !== this.options.avatar)
                ) {
                    var i = document.createElement("img");
                    (i.src = this.options.avatar),
                        (i.className = "toastify-avatar"),
                        this.options.positionLeft
                            ? this.toastElement.insertAdjacentElement("afterbegin", i)
                            : this.toastElement.insertAdjacentElement("beforeend", i);
                }
                if (!0 === this.options.close) {
                    var s = document.createElement("button");
                    (s.type = "button"),
                        s.setAttribute("aria-label", "Close"),
                        (s.className = "toast-close"),
                        (s.innerHTML = "&#10006;"),
                        s.addEventListener(
                            "click",
                            function (t) {
                                t.stopPropagation(),
                                    this.removeElement(this.toastElement),
                                    window.clearTimeout(this.toastElement.timeOutValue);
                            }.bind(this)
                        );
                    var e = window.innerWidth > 0 ? window.innerWidth : screen.width;
                    e <= 360 &&
                        (this.toastElement.insertAdjacentElement("afterbegin", s),
                            (s.style.marginLeft = "0")),
                        this.options.positionLeft
                            ? this.toastElement.insertAdjacentElement("beforeend", s)
                            : this.toastElement.insertAdjacentElement("afterbegin", s);
                }
                return (
                    this.options.stopOnFocus &&
                    this.options.duration > 0 &&
                    (this.toastElement.addEventListener(
                        "mouseover",
                        function (t) {
                            window.clearTimeout(this.toastElement.timeOutValue);
                        }.bind(this)
                    ),
                        this.toastElement.addEventListener(
                            "mouseout",
                            function () {
                                this.toastElement.timeOutValue = window.setTimeout(
                                    function () {
                                        this.removeElement(this.toastElement);
                                    }.bind(this),
                                    this.options.duration
                                );
                            }.bind(this)
                        )),
                    "function" == typeof this.options.onClick &&
                    this.toastElement.addEventListener(
                        "click",
                        function (t) {
                            this.options.onClick();
                        }.bind(this)
                    ),
                    "object" == typeof this.options.offset &&
                    ((this.options.offset.x = o.lib.getAxisOffsetAValue(
                        "x",
                        this.options
                    )),
                        (this.options.offset.y = o.lib.getAxisOffsetAValue(
                            "y",
                            this.options
                        ))),
                    this
                );
            },
            showToast: function () {
                var t;
                if (this.selector) {
                    var i = document.querySelectorAll(this.selector);
                    if (i === void 0 || 0 === i.length)
                        throw "The selector you provided did not match any element";
                    for (var s = 0; s < i.length; s++)
                        i[s].addEventListener(
                            "click",
                            function (t) {
                                t.preventDefault(), this.showToast();
                            }.bind(this)
                        );
                } else {
                    if (
                        ((this.toastElement.parentNode = o.lib.toastify),
                            document.body.contains(o.lib.toastify) ||
                            document.body.appendChild(o.lib.toastify),
                            this.options.oldestFirst === !0)
                    )
                        o.lib.toastify.insertBefore(
                            this.toastElement,
                            o.lib.toastify.firstChild
                        );
                    else o.lib.toastify.appendChild(this.toastElement);
                    o.lib.reposition(),
                        this.options.duration > 0 &&
                        (this.toastElement.timeOutValue = window.setTimeout(
                            function () {
                                this.removeElement(this.toastElement);
                            }.bind(this),
                            this.options.duration
                        ));
                    var n = this;
                    this.options.destination &&
                        this.toastElement.addEventListener("click", function (t) {
                            t.stopPropagation(),
                                !0 === n.options.newWindow
                                    ? window.open(n.options.destination, "_blank")
                                    : (window.location = n.options.destination);
                        }),
                        "function" == typeof n.options.callback &&
                        n.options.callback.call(n.toastElement);
                }
                return this;
            },
            removeElement: function (t) {
                window.setTimeout(
                    function () {
                        t.parentNode.removeChild(t),
                            this.options.callback(),
                            o.lib.reposition();
                    }.bind(this),
                    400
                ),
                    (t.className = t.className.replace(" on", ""));
            },
            reposition: function () {
                for (
                    var t,
                    o = document.querySelectorAll(".toastify"),
                    i = 0,
                    s = 0,
                    e = 0,
                    n = 0,
                    a = 0,
                    l = 0,
                    r = 0,
                    c = 0,
                    d = 0,
                    p = 0,
                    u = 0,
                    f = 0,
                    h = 0,
                    m = 0,
                    v = 0,
                    y = 0,
                    g = 0,
                    w = 0,
                    b = 0,
                    x = 0,
                    E = 0,
                    T = 0,
                    L = 0,
                    S = 0,
                    D = 0,
                    A = 0,
                    O = 0,
                    k = 0,
                    M = 0,
                    N = 0,
                    P = 0,
                    j = 0,
                    F = 0,
                    H = 0,
                    W = 0,
                    B = 0,
                    z = 0,
                    R = 0,
                    q = 0,
                    V = 0,
                    K = 0,
                    Q = 0,
                    X = 0,
                    Y = 0,
                    U = 0,
                    G = 0,
                    J = 0,
                    Z = 0,
                    $,
                    I = 0,
                    C = 0;
                    I < o.length;
                    I++
                ) {
                    var _ = o[I].offsetHeight;
                    (s = "toastify-top" === o[I].classList[1] ? "top" : "bottom"),
                        (e =
                            "toastify-center" === o[I].classList[2]
                                ? "center"
                                : "toastify-right" === o[I].classList[3]
                                    ? "right"
                                    : "left");
                    for (var C = 0; C < o.length; C++)
                        if (o[C].classList.contains(s) && o[C].classList.contains(e)) {
                            var k = window.getComputedStyle(o[C]);
                            if (["top", "bottom"].indexOf(s) > -1) {
                                var M = parseFloat(k.marginTop) + parseFloat(k.marginBottom);
                                t = o[C].offsetHeight + M;
                            }
                            if (I > C) {
                                var N = o[C].offsetHeight,
                                    P =
                                        parseFloat(window.getComputedStyle(o[C]).marginTop) +
                                        parseFloat(window.getComputedStyle(o[C]).marginBottom);
                                (N += P),
                                    "top" === s
                                        ? ("left" === e
                                            ? (i += N)
                                            : "right" === e
                                                ? (a += N)
                                                : (n += N),
                                            (l += N))
                                        : ("left" === e
                                            ? (r += N)
                                            : "right" === e
                                                ? (d += N)
                                                : (c += N),
                                            (p += N));
                            }
                        }
                    "top" === s
                        ? ("left" === e
                            ? (o[I].style.top = i + "px")
                            : "right" === e
                                ? (o[I].style.top = a + "px")
                                : (o[I].style.top = n + "px"),
                            (o[I].style.top = l + "px"))
                        : ("left" === e
                            ? (o[I].style.bottom = r + "px")
                            : "right" === e
                                ? (o[I].style.bottom = d + "px")
                                : (o[I].style.bottom = c + "px"),
                            (o[I].style.bottom = p + "px")),
                        o[I].style.top &&
                        o[I].style.top.length > 0 &&
                        (o[I].style.top =
                            "calc(" +
                            o[I].style.top +
                            " + " +
                            o.lib.getAxisOffsetAValue("y", this.options) +
                            ")"),
                        o[I].style.bottom &&
                        o[I].style.bottom.length > 0 &&
                        (o[I].style.bottom =
                            "calc(" +
                            o[I].style.bottom +
                            " + " +
                            o.lib.getAxisOffsetAValue("y", this.options) +
                            ")"),
                        o[I].style.left &&
                        o[I].style.left.length > 0 &&
                        (o[I].style.left =
                            "calc(" +
                            o[I].style.left +
                            " + " +
                            o.lib.getAxisOffsetAValue("x", this.options) +
                            ")"),
                        o[I].style.right &&
                        o[I].style.right.length > 0 &&
                        (o[I].style.right =
                            "calc(" +
                            o[I].style.right +
                            " + " +
                            o.lib.getAxisOffsetAValue("x", this.options) +
                            ")");
                }
            },
            getAxisOffsetAValue: function (t, o) {
                return o.offset[t]
                    ? isNaN(o.offset[t])
                        ? o.offset[t]
                        : o.offset[t] + "px"
                    : 0;
            },
        }),
        (o.lib.init.prototype = o.lib),
        o
    );
});
